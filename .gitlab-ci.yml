### ArteryPartner.co,.ltd. ###

## SECTION : Read ME 

# Environment variable 
# https://docs.gitlab.com/ee/ci/variables/

# Predefined environment variables
# https://docs.gitlab.com/ee/ci/variables/predefined_variables.html 

# Using docker images
# https://docs.gitlab.com/ee/ci/docker/using_docker_images.html

# .gitlab-ci.yml reference
# https://docs.gitlab.com/ee/ci/yaml/

# gitlab-ci Template development
# https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/doc/development/cicd/templates.md

# Container registry reference (authenticating, etc.)
# https://gitlab.com/help/user/packages/container_registry/index
## !SECTION 

## SECTION :CI-Header
## ANCHOR --> Define CI stage & Share variable

stages:
  - build
  #- test
  #- release
  #- deploy staging
  #- test staging
  #- clear

## NOTE --> In Frappe framework application CD stage will run in frappe-docker CI/CD

## ANCHOR --> Golbal Variable
variables: 

## NOTE --> variable for docker build-arg 
  FRAPPE_BRANCH: FRAPPE_BRANCH=develop
  ERPNEXT_BRANCH: ERPNEXT_BRANCH=develop
 
  APP_NAME: APP_NAME=$CI_PROJECT_NAME
  GIT_REPO: GIT_REPO=$CI_REPOSITORY_URL
  GIT_BRANCH: GIT_BRANCH=$CI_COMMIT_REF_NAME

  VERSION: version-13
  NGINX_BUILD_ARG: "--pull --build-arg=$FRAPPE_BRANCH --build-arg=$ERPNEXT_BRANCH --build-arg=$GIT_REPO --build-arg=$GIT_BRANCH -t $CI_PROJECT_NAME-nginx -f $NGINX_DOCKERFILE ."

## NOTE --> Variable for docker
  NGINX_IMAGE: "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_PROJECT_NAME-nginx"
  NGINX_DOCKERFILE: docker/$CI_PROJECT_NAME-nginx/Dockerfile

  WORKER_IMAGE: "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_PROJECT_NAME-worker"
  WORKER_DOCKERFILE: docker/$CI_PROJECT_NAME-worker/Dockerfile

#  DOCKER_HOST: tcp://docker:2376
#  DOCKER_TLS_CERTDIR: "/certs"

## NOTE --> Variable for Deployment
#  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

image: docker:latest
services:
  - docker:dind
before_script:
  - apk add git
  - echo "Running pipeline from REPO:'$GIT_REPO' --branch:'$CI_COMMIT_BRANCH' for app:'$CI_PROJECT_NAME'"
  - |
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
    tag=""
    echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
    else
    tag=":$CI_COMMIT_REF_SLUG"
    echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
    fi
  - echo "$NGINX_BUILD_ARG"
  - echo "$CI_REGISTRY_IMAGE"
  - echo "$CI_COMMIT_REF_NAME"
  - echo "$CI_COMMIT_TAG"
  - echo To build"$NGINX_IMAGE"
  - echo "$NGINX_DOCKERFILE"
  - echo "$WORKER_IMAGE"
  - echo "$WORKER_DOCKERFILE"

## ANCHOR --> Registry Auth
## NOTE --> Job Token Auth.
  #- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
## NOTE --> CI VAR Auth
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
## NOTE --> Deploy key Auth
  #  docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
## NOTE --> Personal Access Token Auth 
  # docker login -u <username> -p <access_token> $CI_REGISTRY

  # NOTE --> Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
## !SECTION

## SECTION : Define a job in each stage

## ANCHOR --> Test Stage for python (lint & unit Test)
## TODO --> Using Docker to run test command as a script

#lint_test:
#  image: python:3.8.0-slim
#  stage: test
#  before_script:
#    - pip install flake8-html
#  script:
#    - flake8 --format=html --htmldir=flake_reports/
#  artifacts:
#    when: always
#    paths:
#      - flake_reports/

#pytest:
#  image: python:3.8.0-slim
#  stage: test
#  before_script:
   # - pip install pytest-html
  #  - pip install -r requirements.txt
#  script:
  #  - pytest --html=pytest_reports/pytest-report.html --self-contained-html
#  artifacts:
#    when: always
#    paths:
 #     - pytest_reports/

## ANCHOR --> Build Stage
build_shopee_open_api_nginx:
  stage: build
  script:
    - docker build "$NGINX_BUILD_ARG"

    - docker tag "$CI_PROJECT_NAME"-nginx "$NGINX_IMAGE":develop
    - docker tag "$CI_PROJECT_NAME"-nginx "$NGINX_IMAGE":edge
    - docker tag "$CI_PROJECT_NAME"-nginx "$NGINX_IMAGE":latest
    - docker push "$NGINX_IMAGE":develop
    - docker push "$NGINX_IMAGE":latest
    - docker push "$NGINX_IMAGE":edge
      
  only:
   - develop

build_shopee_open_api_worker:
  stage: build
  script:
    - docker build 
      --pull 
      --build-arg="$ERPNEXT_BRANCH" 
      -t "$CI_PROJECT_NAME"-worker 
      -f "$WORKER_DOCKERFILE" .
    - docker tag "$CI_PROJECT_NAME"-worker "$WORKER_IMAGE":develop
    - docker tag "$CI_PROJECT_NAME"-worker "$WORKER_IMAGE":edge
    - docker tag "$CI_PROJECT_NAME"-worker "$WORKER_IMAGE":latest
    - docker push "$WORKER_IMAGE":develop
    - docker push "$WORKER_IMAGE":edge
    - docker push "$WORKER_IMAGE":latest

  only:
   - develop

#build_release_shopee_open_api_nginx:
##  stage: build
#  only:
#    - tags
#  script:
#    - docker build --build-arg=FRAPPE_BRANCH=v13.12.1 --build-arg=ERPNEXT_BRANCH=v13.12.1 -t nginx -f docker/nginx/Dockerfile .
#    - docker tag nginx "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/shopee_open_api/nginx:latest"
#    - docker push "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/shopee_open_api/nginx:latest"
#    
#    - |
#      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
#        tag=""
#        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
#      else
#        tag=":$CI_COMMIT_REF_SLUG"
#        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
#      fi
#    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
#    - docker push "$CI_REGISTRY_IMAGE${tag}"

#build_release_shopee_open_api_worker:
#  stage: build
#  only:
#    refs:
#      - main
#  script:
#    - docker build --build-arg=ERPNEXT_BRANCH=v13.12.1 -t worker -f docker/worker/Dockerfile .
#    - docker tag worker "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/shopee_open_api/worker:latest"
#    - docker push "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/shopee_open_api/worker:latest"
#

## ANCHOR --> Deply Staging
## TODO --> using Doctl docker to send command for deploy & setup application 
#deploy_staging:
#  image: alpine:latest
#  stage: deploy staging
#  only:
#    refs:
#      - tags
#      - release

#  before_script:
#    - apk add curl bash
#  script:
#    - curl -s -X POST $NGINX_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $GUNICORN_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $DEFAULT_WORKER_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $SHORT_WORKER_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $LONG_WORKER_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $SCHEDULER_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $SOCKETIO_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $MIGRATE_SITE_KEY -o /dev/null

## ANCHOR --> Testing Staging
## TODO --> using Doctl docker to send command for testing staging application