### ArteryPartner.co,.ltd. ###

# SECTION : Basic Info 

# ANCHOR: using Docker Executor

# TODO : Create Test Stage for develop branch
# TODO : Set up pre-define Environment variable
# TODO : using gitlab CI variable 

# REVIEW : Environment VAR
# !SECTION

# SECTION : Read ME 

# Environment variable 
# https://docs.gitlab.com/ee/ci/variables/

# Predefined environment variables
# https://docs.gitlab.com/ee/ci/variables/predefined_variables.html 

# Using docker images
# https://docs.gitlab.com/ee/ci/docker/using_docker_images.html

# .gitlab-ci.yml reference
# https://docs.gitlab.com/ee/ci/yaml/

# Container registry reference (authenticating, etc.)
# https://gitlab.com/help/user/packages/container_registry/index
# !SECTION 

# SECTION :CI-Header
# ANCHOR --> Define CI stage & Share variable

stages:
  - build
  #- test
  #- release
  #- deploy
  #- clear

# NOTE --> In Frappe framework application CD stage will run in frappe-docker CI/CD

# ANCHOR --> Golbal Variable
variables:
# REVIEW : Gitlab $CI_veariable for generate Image tag   
#  GIT_REPO: $CI_REPOSITORY_URL
#  GIT_PROJECT_NAME: $CI_PROJECT_NAME
#  CI_COMMIT_TAG: $CI_COMMIT_TAG
#  CI_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA
  VERSION: version-13
  IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
  NGINX_IMAGE: "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_PROJECT_NAME-nginx"
  NGINX_DOCKERFILE: docker/$CI_PROJECT_NAME-nginx/Dockerfile

  WORKER_IMAGE: "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_PROJECT_NAME-worker"
  WORKER_DOCKERFILE: docker/"$CI_PROJECT_NAME"-worker/Dockerfile
#  DOCKER_HOST: tcp://docker:2376
#  DOCKER_TLS_CERTDIR: "/certs"

#  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

# NOTE --> To send gitlab VARIABLE To Docker command add `"$VAR"` 

image: docker:latest

services:
  - docker:dind

before_script:
  - apk add git
  - echo "$NGINX_IMAGE"
  - echo "$NGINX_DOCKERFILE"
  - echo "$WORKER_IMAGE"
  - echo "$WORKER_DOCKERFILE"
  ## ANCHOR --> Registry Auth
  # NOTE --> Job Token Auth.
  #- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  # NOTE --> CI VAR Auth
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # NOTE --> Deploy key Auth
  #  docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
  # NOTE --> Personal Access Token Auth 
  # docker login -u <username> -p <access_token> $CI_REGISTRY

  # NOTE --> Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
# !SECTION

# SECTION : Define a job in each stage

# ANCHOR --> Test Stage for python (lint & unit Test)
# TODO --> Using Docker to run test command as a script

#lint_test:
#  image: python:3.8.0-slim
#  stage: test
#  before_script:
#    - pip install flake8-html
#  script:
#    - flake8 --format=html --htmldir=flake_reports/
#  artifacts:
#    when: always
#    paths:
#      - flake_reports/

#pytest:
#  image: python:3.8.0-slim
#  stage: test
#  before_script:
   # - pip install pytest-html
  #  - pip install -r requirements.txt
#  script:
  #  - pytest --html=pytest_reports/pytest-report.html --self-contained-html
#  artifacts:
#    when: always
#    paths:
 #     - pytest_reports/

# ANCHOR --> Build Stage
# NOTE --> Frappe framework run build stage to build two image (nginx & worker)

build_shopee_open_api_nginx:
  stage: build
  script:
    - docker build --pull --build-arg=FRAPPE_BRANCH=v13.12.1 --build-arg=ERPNEXT_BRANCH=v13.12.1 --build-arg=GIT_REPO="$CI_REPOSITORY_URL" -t "$CI_PROJECT_NAME"-nginx -f "$NGINX_DOCKERFILE" .
    - docker tag "$CI_PROJECT_NAME"-nginx "$NGINX_IMAGE":"$VERSION"
    - docker tag "$CI_PROJECT_NAME"-nginx "$NGINX_IMAGE":develop
    - docker tag "$CI_PROJECT_NAME"-nginx "$NGINX_IMAGE":edge
    - docker tag "$CI_PROJECT_NAME"-nginx "$NGINX_IMAGE":latest
    - docker push "$NGINX_IMAGE":"$VERSION"
  only:
   - develop

build_shopee_open_api_worker:
  stage: build
  script:
    - docker build --pull --build-arg=ERPNEXT_BRANCH=v13.12.1 -t "$CI_PROJECT_NAME"-worker -f docker/"$CI_PROJECT_NAME"-worker/Dockerfile .
    - docker tag "$CI_PROJECT_NAME"-worker "$WORKER_IMAGE":"$VERSION"
    - docker push "$WORKER_IMAGE":"$VERSION"
  only:
   - develop

#build_staging_shopee_open_api_nginx:
##  stage: build
#  only:
#    refs:
#      - main
#  script:
#    - docker build --build-arg=FRAPPE_BRANCH=v13.12.1 --build-arg=ERPNEXT_BRANCH=v13.12.1 -t nginx -f docker/nginx/Dockerfile .
#    - docker tag nginx "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/shopee_open_api/nginx:latest"
#    - docker push "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/shopee_open_api/nginx:latest"
#
#build_staging_shopee_open_api_worker:
#  stage: build
#  only:
#    refs:
#      - main
#  script:
#    - docker build --build-arg=ERPNEXT_BRANCH=v13.12.1 -t worker -f docker/worker/Dockerfile .
#    - docker tag worker "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/shopee_open_api/worker:latest"
#    - docker push "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/shopee_open_api/worker:latest"
#
# ANCHOR --> Deply Stage

#deploy_staging:
#  image: alpine:latest
#  stage: deploy
#  only:
#    refs:
#      - develop
#  before_script:
#    - apk add curl bash
#  script:
#    - curl -s -X POST $NGINX_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $GUNICORN_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $DEFAULT_WORKER_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $SHORT_WORKER_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $LONG_WORKER_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $SCHEDULER_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $SOCKETIO_UPDATE_KEY -o /dev/null
#    - curl -s -X POST $MIGRATE_SITE_KEY -o /dev/null

